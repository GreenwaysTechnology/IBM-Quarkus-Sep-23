				Micro service Communications
.....................................................................................

Services are represented by Apis

Apis are modeled in many ways

1.RPI
    -REST API
    -RPC - Grpc
    -GraphQl api
2.Message based
    -MOM
       -redis,RabbitMQ,IBM MQ
    -Event driven Arch
       Vertx-Event Bus
       Kafka

Service Communications:

REST: Rest to Rest - http

Quarkus Implmementations
  1.MicroProfile Rest Client -  both reactive and non reactive
  2.Vertx WebClient - By Default Reactive.
  3.Java 11 HttpClient - Sync and Async


1.MicroProfile Rest Client
..........................

Create New Project

quarkus create app code-with-quarkus-servicecommunications

Dependencies:
quarkus ext add resteasy-reactive-jackson
quarkus ext add rest-client-reactive-jackson
quarkus ext add rest-client-reactive

In Service communications there are two actors

1.Caller
  Who is calling the other service 
2.Callee
  Who is called by the other services

Flow:

 User/App ------http-->Caller------>Callee


Steps:
1.Callee Service:

package com.ibm.rest.client;
import jakarta.enterprise.context.ApplicationScoped;

@ApplicationScoped
public class HelloService {

    public String hello() {
        return "Hello Service";
    }
}
package com.ibm.rest.client;

//callee Service

import jakarta.inject.Inject;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;

@Path("/hello")
public class HelloResource {

    @Inject
    HelloService helloService;

    @GET
    public String hello() {
        return helloService.hello();
    }
}

Step 2:
 Rest Client Interface: To facilate Rest Communications between two services
package com.ibm.rest.client.restcommunicator;


import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;
import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;

@Path("/hello")
@RegisterRestClient
public interface HelloRestClientService {
    //CURD OPERATIONS OF CALL Declaration
    @GET
    String sayHello();
}

1.Here we need to declare interface
2.Annotate Interface with @RegisterRestClient
3.@Path("hello") indicates the call route url
4.HTTP method and apis mapping inside interface

Step 3: Configure the application.properties
#Mapping the Rest Client
com.ibm.rest.client.restcommunicator.HelloRestClientService/mp-rest/url=http://localhost:8080
com.ibm.rest.client.restcommunicator.HelloRestClientService/mp-rest/scope=javax.inject.Singleton

Step 4: Inject the RestClient Interface into caller Service

package org.acme;

import com.ibm.rest.client.restcommunicator.HelloRestClientService;
import jakarta.inject.Inject;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.Produces;
import jakarta.ws.rs.core.MediaType;
import org.eclipse.microprofile.rest.client.inject.RestClient;

@Path("/greet")
public class GreetingResource {

    @Inject
    @RestClient
    HelloRestClientService helloRestClientService;

    @GET
    @Produces(MediaType.TEXT_PLAIN)
    public String hello() {
        return  helloRestClientService.sayHello();
    }
}

How to Test:
User uses the url
http://localhost:8080/greet
   Which delegates to another service called "HelloResource".
...................................................................................
			 Refactored configurations
...................................................................................

application.properties
#Mapping the Rest Client
com.ibm.rest.client.restcommunicator.HelloRestClientService/mp-rest/url=http://localhost:8080
com.ibm.rest.client.restcommunicator.HelloRestClientService/mp-rest/scope=javax.inject.Singleton

here we have mentioned class Name using full package Name , this can be simplified

package com.ibm.rest.client.restcommunicator;

import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;
import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;

@Path("/hello")
//@RegisterRestClient
@RegisterRestClient(configKey = "hello-api")
public interface HelloRestClientService {
    //CURD OPERATIONS OF CALL Declaration
    @GET
    String sayHello();
}

application.properties:
#Mapping the Rest Client
#com.ibm.rest.client.restcommunicator.HelloRestClientService/mp-rest/url=http://localhost:8080
#com.ibm.rest.client.restcommunicator.HelloRestClientService/mp-rest/scope=javax.inject.Singleton

#Refactored configuration
hello-api/mp-rest/url=http://localhost:8080
hello-api/mp-rest/scope=javax.inject.Singleton
...................................................................................
			 Reactive type: Non Blocking way
....................................................................................

Callee:
package com.ibm.rest.client;


import io.smallrye.mutiny.Uni;
import jakarta.enterprise.context.ApplicationScoped;

@ApplicationScoped
public class HelloService {

    public Uni<String> hello() {
        return Uni.createFrom().item("Hello Rest Client Service");
    }
}

package com.ibm.rest.client;

//callee Service

import io.smallrye.mutiny.Uni;
import jakarta.inject.Inject;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;

@Path("/hello")
public class HelloResource {

    @Inject
    HelloService helloService;

    @GET
    public Uni<String> hello() {
        return helloService.hello();
    }
}

Rest client Interface:
package com.ibm.rest.client.restcommunicator;


import io.smallrye.mutiny.Uni;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;
import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;

@Path("/hello")
//@RegisterRestClient
@RegisterRestClient(configKey = "hello-api")
public interface HelloRestClientService {
    //CURD OPERATIONS OF CALL Declaration
    @GET
    Uni<String> sayHello();
}

Caller Side
package org.acme;

import com.ibm.rest.client.restcommunicator.HelloRestClientService;
import io.smallrye.mutiny.Uni;
import jakarta.inject.Inject;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.Produces;
import jakarta.ws.rs.core.MediaType;
import org.eclipse.microprofile.rest.client.inject.RestClient;

@Path("/greet")
public class GreetingResource {

    @Inject
    @RestClient
    HelloRestClientService helloRestClientService;

    @GET
    @Produces(MediaType.TEXT_PLAIN)
    public Uni<String> hello() {
        return  helloRestClientService.sayHello();
    }
}

TasK
.....
Create  Customer callee Service with reactive hibernate integration
Create  CustomerCaller service which should call Customer Service 
You can use either Active Record pattern or DAO pattern.
....................................................................................
			 2.Vertx WebClient - By Default Reactive.


There are two dependencies we need to add 
<dependency>
  <groupId>io.smallrye.reactive</groupId>
  <artifactId>smallrye-mutiny-vertx-web-client</artifactId>
</dependency>

<dependency>
  <groupId>io.quarkus</groupId>
  <artifactId>quarkus-vertx</artifactId>
</dependency>



Callee: The same call example we have used for "MicroProfile Rest client".

package com.ibm.rest.client;
import io.smallrye.mutiny.Uni;
import jakarta.enterprise.context.ApplicationScoped;

@ApplicationScoped
public class HelloService {

    public Uni<String> hello() {
        return Uni.createFrom().item("Hello Rest Client Service");
    }
}
package com.ibm.rest.client;

//callee Service

import io.smallrye.mutiny.Uni;
import jakarta.inject.Inject;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;

@Path("/hello")
public class HelloResource {

    @Inject
    HelloService helloService;

    @GET
    public Uni<String> hello() {
        return helloService.hello();
    }
}
........

Caller side:

package org.acme;

import com.ibm.rest.client.restcommunicator.HelloRestClientService;
import io.smallrye.mutiny.Uni;
import io.vertx.ext.web.client.WebClientOptions;
import io.vertx.mutiny.core.Vertx;
import io.vertx.mutiny.ext.web.client.HttpResponse;
import io.vertx.mutiny.ext.web.client.WebClient;
import jakarta.annotation.PostConstruct;
import jakarta.inject.Inject;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.Produces;
import jakarta.ws.rs.core.MediaType;
import org.eclipse.microprofile.rest.client.inject.RestClient;

@Path("/greet")
public class GreetingResource {

    @Inject
    @RestClient
    HelloRestClientService helloRestClientService;

    //Grab vertx Runtime Instance
    @Inject
    Vertx vertx;

    //WebClient:Object need to be created
    WebClient webClient;

    @PostConstruct // life cycle annotation
    public void init() {
        //create Web Client Object
        webClient = WebClient.create(vertx, new WebClientOptions()
                .setDefaultHost("localhost")
                .setDefaultPort(8080));

    }

    //Rest client
    @GET
    @Produces(MediaType.TEXT_PLAIN)
    public Uni<String> hello() {
        return helloRestClientService.sayHello();
    }

    @GET
    @Path("/vertxclient")
    public Uni<String> sayHello() {
        return webClient.get("/hello").send().onItem().transform(HttpResponse::bodyAsString);
    }
}
..........................************************.................................
.....................................................................................
			  Message Oriented Communication
.....................................................................................
			Service Communications via Messages
			   (Event Driven Microservices)
				Using vertx Event Bus
....................................................................................


how to build loosly coupled microservices?


AKKA - Actor Model Based.

Actor model is architure model which describes how data can be exchanged among programs we call services using "message oriented and event driven".

Vertx inspired akka with respect to message passing techniques, now we can pass messages using vertx  "Event Bus".

Event Bus:
 -Event bus is object through which we can exchange messages async.
 -Event bus is just like message broker which in memory message broker
 -Event bus uses queue to store messages
 -Event bus communicates via tcp protocal
 -Event bus can exchange any type of data- including json.
 -Event can be used to send and receive messages across the system.

Quarkus can Use EventBus for message oriented communication.


How consumer and publisher are connectected?

 Via address :Messages are sent on the event bus to an address.
address should be unique, can follow dns naming model

 ibm.order
 ibm.order.inventory


Types of message Delivery:

1.point to point -  
  send messages to only one consumer.
 eventbus.send
2.Publisher/Subscriber  - pub sub model
  One publisher many subscribers
  eventbus.publish
3.request/reply
    send messages to only one consumer with ack.


Quarkus Event Bus Methods:
1.send ->Point to Point
  A message to specific address - One Single Consumer recevies Message
2.

Dependency:
 vertx
     <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-vertx</artifactId>
    </dependency>

Steps:
1.Callee(Listener) implementation
package com.ibm.vertx.event.bus;

import io.quarkus.vertx.ConsumeEvent;
import jakarta.enterprise.context.ApplicationScoped;

//Listener
@ApplicationScoped
public class CustomerService {
    
    //listener methods
    @ConsumeEvent("ibm.customer.service.list")
    public String findAll(){
        return  "Customer Service";
    }
    
}

How to publish Message or How to communicate service with Event Bus?
package com.ibm.vertx.event.bus;


import io.smallrye.mutiny.Uni;
import io.vertx.mutiny.core.eventbus.EventBus;
import io.vertx.mutiny.core.eventbus.Message;
import jakarta.inject.Inject;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.PathParam;

@Path("customers")
public class CustomerResource {

    @Inject
    EventBus eventBus;

    @GET
    @Path("{id}")
    public Uni<String> getCustomerInfo(@PathParam("id") String id) {
        return eventBus.<String>request("ibm.customer.service.list", id).onItem().transform(Message::body);
    }

}

How to test?
GET http://localhost:8080/customers/100

Response:
Customer Service 100
.................................................................................
				Fire and Foget -Request and Reply pattern
..................................................................................

Service:
package com.ibm.vertx.event.bus;

import io.quarkus.vertx.ConsumeEvent;
import io.vertx.mutiny.core.eventbus.Message;
import jakarta.enterprise.context.ApplicationScoped;

//Listener
@ApplicationScoped
public class CustomerService {

    @ConsumeEvent("com.ibm.customer.service.greet")
    public void sayHello(Message<String> message) {
        System.out.println(message.body());
        System.out.println(message.address());

    }

}

Resource:
package com.ibm.vertx.event.bus;


import io.smallrye.mutiny.Uni;
import io.vertx.mutiny.core.eventbus.EventBus;
import io.vertx.mutiny.core.eventbus.Message;
import jakarta.inject.Inject;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.PathParam;

@Path("customers")
public class CustomerResource {

    @Inject
    EventBus eventBus;

    //Fire and Forget
    @Path("/hello")
    @GET
    public String getCustomerInfo2() {
        EventBus eventBus1 = eventBus.requestAndForget("com.ibm.customer.service.greet", "Hello");
        return "Processed";
    }

}
...................................................................................
			Pub and Sub Pattern -one Many
....................................................................................

When you publish message on an address, who ever has that address they will get Messages.

Service:
package com.ibm.vertx.event.bus;

import io.quarkus.vertx.ConsumeEvent;
import io.vertx.mutiny.core.eventbus.Message;
import jakarta.enterprise.context.ApplicationScoped;

//Listener
@ApplicationScoped
public class CustomerService {

     //pub- sub - many subscribers or consumers

    @ConsumeEvent("com.ibm.customer.notification")
    public void notification_1(Message<String> message) {
        System.out.println("Listener 1");
        //process the message
        System.out.println(message.body() + " " + message.address());
    }

    @ConsumeEvent("com.ibm.customer.notification")
    public void notification_2(Message<String> message) {
        System.out.println("Listener 2");
        System.out.println(message.body() + " " + message.address());

    }

}

Resources:
package com.ibm.vertx.event.bus;


import io.smallrye.mutiny.Uni;
import io.vertx.mutiny.core.eventbus.EventBus;
import io.vertx.mutiny.core.eventbus.Message;
import jakarta.inject.Inject;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.PathParam;

@Path("customers")
public class CustomerResource {

    @Inject
    EventBus eventBus;

    @GET
    @Path("/notification")
    public String notification() {
        eventBus.publish("com.ibm.customer.notification", "Learn Quarkus");
        return "Notified";
    }

}
.....................................................................................
			Event Sourcing - Microservice Pattern
.....................................................................................
A service need to send messages to another service.
   Message oriented Communication

Highly loosly coupled communications,This pattern already there in the monolithic applications for integrating with third party system or inter system communication or 
long running process.

Implmenetations in Quarkus:

1.SmallRye Reactive Messaging
  SmallRye Reactive Messaging is a framework for building event-driven, data streaming, and event-sourcing applications using CDI.

 It lets your application interaction using various messaging technologies such as Apache Kafka, AMQP or MQTT. 
The framework provides a flexible programming model bridging CDI and event-driven.


Core Concepts of Reactive Messaging:
....................................

1.Message
   It is wrapper which contains "payload(data) + meta data"
   The App can pusblish message(publisher) and can process message(consumer)

2.Channel
   It is logical pipeline through which Messages are transmitted.

3.Connector
   It is a code which connects brokers which is software which has Messages.

Programming Model:
 Reactive Messaging uses CDI annotations to abstract underlying message brokers

Annotations:

org.eclipse.microprofile.reactive.messaging.Incoming - indicates the consumed channel

org.eclipse.microprofile.reactive.messaging.Outgoing - indicates the populated channel

eg:
import org.eclipse.microprofile.reactive.messaging.Message;
import org.eclipse.microprofile.reactive.messaging.Outgoing;

import javax.enterprise.context.ApplicationScoped;

@ApplicationScoped
public class MessageProcessingBean {

    @Incoming("consumed-channel")
    @Outgoing("populated-channel")
    public Message<String> process(Message<String> in) {
        // Process the payload
        String payload = in.getPayload().toUpperCase();
        // Create a new message from `in` and just update the payload
        return in.withPayload(payload);
    }
}
..............
Sample Code Work Flow:
......................

@Outgoing("source")
public Multi<String> generate() {
    return Multi.createFrom().items("Hello", "from", "reactive", "messaging");
}

@Incoming("source")
@Outgoing("sink")
public String process(String in) {
    return in.toUpperCase();
}

@Incoming("sink")
public void consume(String processed) {
    System.out.println(processed);
}
generate --> [ source ] --> process --> [ sink ] --> consume

only @Outgoing are used to generate messages or payloads - Publisher

only @Incoming are used to consume messages or payloads -Consumer

both @Incoming and @Outgoing are used to process messages or payloads; or transform the stream == Creating Messages

....................................................................................
		SmallRye Reactive Messaging With Apache Kafka
...................................................................................			
Req:
 1.Quarkus App with necessary dependency
 2.Kafka 
    -Dev 
	Quarkus offers Kafka as dev service
      quarkus-smallrye-reactive-messaging-kafka
    -Production

Application Arch:

 There will be two application

 1.Producer App which produces messages and stores into Kafka
 2.Consumer App which receives messages from the Kafka and process them, transfers to    again producer applications.

pom.xml:
 	<dependency>
         <groupId>io.quarkus</groupId>
            <artifactId>quarkus-smallrye-reactive-messaging-kafka</artifactId>
        </dependency>

        <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-resteasy-reactive-jackson</artifactId>
        </dependency>

Steps:
1.Producer :

 POST /quotes/request
    -publish data into Kafka cluster
 GET /quotes
    -Consumes From the Kafka cluster after processing.


Models:
package org.acme.kafka.model;

public class Quote {

    public String id;
    public int price;

    /**
     * Default constructor required for Jackson serializer
     */
    public Quote() { }

    public Quote(String id, int price) {
        this.id = id;
        this.price = price;
    }

    @Override
    public String toString() {
        return "Quote{" +
                "id='" + id + '\'' +
                ", price=" + price +
                '}';
    }
}

Serialzer: 
package org.acme.kafka.model;

import io.quarkus.kafka.client.serialization.ObjectMapperDeserializer;

public class QuoteDeserializer extends ObjectMapperDeserializer<Quote> {
    public QuoteDeserializer() {
        super(Quote.class);
    }
}
QuoteResource:
package org.acme.kafka.producer;

import java.util.UUID;

import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;

import org.acme.kafka.model.Quote;
import org.eclipse.microprofile.reactive.messaging.Channel;
import org.eclipse.microprofile.reactive.messaging.Emitter;

import io.smallrye.mutiny.Multi;

// POST /quotes/request -  send data to the Channel
// GET  /quotes   -  Consume data from the channel
@Path("/quotes")
public class QuotesResource {

    @Channel("quote-requests")
    Emitter<String> quoteRequestEmitter;

    /**
     * Endpoint to generate a new quote request id and send it to "quote-requests" Kafka topic using the emitter.
     */
    @POST
    @Path("/request")
    @Produces(MediaType.TEXT_PLAIN)
    public String createRequest() {
        UUID uuid = UUID.randomUUID();
        quoteRequestEmitter.send(uuid.toString());
        return uuid.toString();
    }

    @Channel("quotes")
    Multi<Quote> quotes;

    /**
     * Endpoint retrieving the "quotes" Kafka topic and sending the items to a server sent event.
     */
    @GET
    @Produces(MediaType.SERVER_SENT_EVENTS) // denotes that server side events (SSE) will be produced
    public Multi<Quote> stream() {
        return quotes.log();
    }
}

.....................................................................................

Quote Processor Application:

Model:
package org.acme.kafka.model;

public class Quote {

    public String id;
    public int price;

    /**
     * Default constructor required for Jackson serializer
     */
    public Quote() { }

    public Quote(String id, int price) {
        this.id = id;
        this.price = price;
    }

    @Override
    public String toString() {
        return "Quote{" +
                "id='" + id + '\'' +
                ", price=" + price +
                '}';
    }
}

Resource
package org.acme.kafka.processor;

import java.util.Random;

import javax.enterprise.context.ApplicationScoped;

import org.acme.kafka.model.Quote;
import org.eclipse.microprofile.reactive.messaging.Incoming;
import org.eclipse.microprofile.reactive.messaging.Outgoing;

import io.smallrye.reactive.messaging.annotations.Blocking;

/**
 * A bean consuming data from the "quote-requests" Kafka topic (mapped to "requests" channel) and giving out a random quote.
 * The result is pushed to the "quotes" Kafka topic.
 */
@ApplicationScoped
public class QuotesProcessor {

    private Random random = new Random();

    @Incoming("requests")
    @Outgoing("quotes")
    @Blocking
    public Quote process(String quoteRequest) throws InterruptedException {
        // simulate some hard working task
        Thread.sleep(2000);
        return new Quote(quoteRequest, random.nextInt(100));
    }
}
.....................................................................................

Testing:
>quarkus-session\kafka-quickstart> mvn -f producer quarkus:dev
>quarkus-session\kafka-quickstart> mvn -f processor quarkus:dev

http://localhost:8080/quotes.html
.....................................................................................
