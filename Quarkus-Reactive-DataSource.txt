				Quarkus-Reactive-Data Source

.....................................................................................

Quarkus ORM implementation via JPA With Hibernate and Panache.

Microservices design pattern called "Data Base Per service Pattern".According to this Pattern Quarkus implements Data sources.

application.properties

quarkus.datasource."ServiceName".dbProperties=value

eg:

without service names
quarkus.datasource.db-kind=h2
quarkus.datasource.username=username-default
quarkus.datasource.jdbc.url=jdbc:h2:mem:default
quarkus.datasource.jdbc.max-size=13

With Service Names

quarkus.datasource.users.db-kind=h2
quarkus.datasource.users.username=username1
quarkus.datasource.users.jdbc.url=jdbc:h2:mem:users
quarkus.datasource.users.jdbc.max-size=11

quarkus.datasource.inventory.db-kind=h2
quarkus.datasource.inventory.username=username2
quarkus.datasource.inventory.jdbc.url=jdbc:h2:mem:inventory
quarkus.datasource.inventory.jdbc.max-size=12

quarkus.datasource.customers.db-kind=postgresql 
quarkus.datasource.customers.username=<your username>
quarkus.datasource.customers.password=<your password>
quarkus.datasource.customers.jdbc.url=jdbc:postgresql://localhost:5432/hibernate_orm_test
quarkus.datasource.customers.jdbc.max-size=16


DbKind: Type of database
common db-kind value conventions
1.DB2: db2
2.Derby: derby
3.H2: h2
3.MariaDB: mariadb
4.Microsoft SQL Server: mssql
5.MySQL: mysql
6.Oracle: oracle
7.PostgreSQL: postgresql, pgsql or pg

Data Source:
...........
Agroal data source is default datasource...
  It is modern,lightweight connection pool implementation designed for high performance.
  It is similar to Apache DBCP libs.

Data sources are powered with reactive programming
   Datasources are powered with non blocking arch....

Transactions:
   Quarkus data module offeres transaction implementations.
   Quarkus implments Narayana as transaction manager

What is Narayana?
Narayana is a transactions toolkit which provides support for applications developed using a broad range of standards-based transaction protocols:

JTA
JTS
Web-Service Transactions
REST Transactions
STM

Reactive Data sources:
  quarkus-reactive-db2-client
  quarkus-reactive-pg-client
 etc...

Coding Pattern:
   Quarkus uses hibernate as low level engine for persistence and built upon JPA   Standards
   Quarkus uses Panache framework built on top of Hibernate.

			Panache
			  |
			 JPA
			  |
			Hibernate
			   
.....................................................................................

....................................................................................
			    JPA With Hibernate
...................................................................................

Steps:

1.You need database 
   db2
   Derby(in-process)
   H2(in-process)
   Mariadb
   mysql
   postgresql
   oracle

How to install database for dev?

Two ways
1.install db server
2.install via containers -dockers

Quarkus apps  has mode

1.dev mode
  start db server  
     standalone
     via docker
2.prod mode
   via containers
   via vms

Quarkus offers features dev services for databases
...................................................

If your quaurkus apps runs in dev/test mode, quarkus provides you with a zero config database outof the box,
 a feature we refer to as "Dev Services"

If you enable dev service for any database, quarkus runs database as part of app within embeded docker container.
 db2,mariadb,mssql,mysql,oracle,postgresql-dev services enabled database

application.properties
quarkus.devservices.enabled=true/false
quarkus.datasource.devservices.enabled=true/false
.....................................................................................
Database connection information:
..................................

Default user name and password for dev services.

postgre,mariadb,mysql,db2,h2 - quarkus,quarkus (userName,password)

Database dependency:

1.Quarkus orm
  ->quarkus-hibernate-orm
  ->quarkus-agroal
  ->quarkus-jdbc-postgresql

JPA as Spec :
 Uses all jpa annotations @Entity,@Table,@Id,@Column....

...................................................................................

Database : 
 ->Postgresql.


POM :
quarkus ext add resteasy-reactive-jackson
quarkus ext add reactive-pg-client
quarkus ext add hibernate-reactive-panache


application.properties
#Dev Services : Todo: this configuration will not be applicable for production
quarkus.devservices.enabled=false
quarkus.datasource.devservices.enabled=false

#Datasource configuration
quarkus.datasource.db-kind=postgresql
quarkus.datasource.username=quarkus
quarkus.datasource.password=quarkus
#quarkus.datasource.jdbc.url=jdbc:postgresql://localhost:5432/db
quarkus.datasource.reactive.url=vertx-reactive:postgresql://localhost:5432/db
#Hibernate configuration
quarkus.hibernate-orm.database.generation=drop-and-create
quarkus.hibernate-orm.log.sql=true
quarkus.hibernate-orm.sql-load-script=import.sql



Create sample table and some sample data

resources/import.sql
INSERT INTO CUSTOMER(id,name,city) VALUES (1, 'Subramanian','Coimbatore');
INSERT INTO CUSTOMER(id,name,city) VALUES (2, 'Murugan','Coimbatore');
INSERT INTO CUSTOMER(id,name,city) VALUES (3, 'Geetha','Chennai');
ALTER SEQUENCE customer_seq RESTART WITH 4;

....................................................................................
				 Hiberate Coding
....................................................................................

There are two Design patterns are proposed to write database coding.

1.Active Record Pattern
2.Repository Design Pattern /DAO Design pattern

Style of Code

1.Using Hibernate with JPA alone
2.Using Panache Hibernate with JPA


Panache is a framework which is built on Hibernate to simplify and enable design patterns easily: Recommended to use Panache.

Active Record Pattern with Panache
..................................
Steps:

1.Declare Entity

import jakarata.persistence.Entity
package com.ibm.quarkus.data.activerecord.entity;


import jakarta.persistence.Entity;

@Entity
public class Customer {
}

2.Inherit PanacheEntity super class
package com.ibm.quarkus.data.activerecord.entity;
import io.quarkus.hibernate.reactive.panache.PanacheEntity;
import jakarta.persistence.Entity;

@Entity
public class Customer extends PanacheEntity {
}

PanacheEntity is super class which offers all "CURD and database apis"

Entity variables which represents columns.
All Variables must be declared "public"
id variables dont need be declared.

package com.ibm.quarkus.data.activerecord.entity;


import io.quarkus.hibernate.reactive.panache.PanacheEntity;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;

@Entity
public class Customer extends PanacheEntity {
    @Column
    public String name;
    @Column
    public String city;

    public Customer(String name, String city) {
        this.name = name;
        this.city = city;
    }

    public Customer() {
    }
}
...................................................................................

Rest Api
package com.ibm.quarkus.data.activerecord.entity;

import io.quarkus.hibernate.reactive.panache.Panache;
import io.smallrye.mutiny.Uni;
import jakarta.transaction.Transactional;
import jakarta.ws.rs.*;
import jakarta.ws.rs.core.Response;

import java.util.List;

package com.ibm.quarkus.data.activerecord.entity;

import static jakarta.ws.rs.core.Response.Status.CREATED;
import static jakarta.ws.rs.core.Response.Status.NOT_FOUND;
import static jakarta.ws.rs.core.Response.Status.NO_CONTENT;

import io.quarkus.hibernate.reactive.panache.Panache;
import io.smallrye.mutiny.Uni;
import jakarta.ws.rs.*;
import jakarta.ws.rs.core.Response;

import java.util.List;

@Path("customers")
public class CustomerResource {

    //return all customers
    @GET
    public Uni<List<Customer>> findAll() {
        return Customer.listAll();
    }

    //find by id
    @Path("/{id}")
    @GET
    public Uni<Customer> findById(@PathParam("id") Long id) {

        return Customer.findById(id);
    }

    @POST
    public Uni<Response> create(Customer customer) {
        //Error Handling
        if (customer == null || customer.name == null) {
            throw new WebApplicationException("CustomerNot Found", 400);
        }
        return Panache.withTransaction(customer::persist)
                .replaceWith(Response.ok(customer)
                        .status(Response.Status.CREATED).build()
                );

    }

    /**
     *
     * Note:
     * PUT localhost:8080/customers/1
     * Input:
     * {
     *     "id": 1,
     *     "name": "Subramanian",
     *     "city": "Chennai"
     * }
     */
    @PUT
    @Path("{id}")
    public Uni<Response> update(Long id, Customer customer) {
        if (customer == null || customer.name == null) {
            throw new WebApplicationException("Customer name was not set on request.", 422);
        }
        System.out.println(id  + " " +  customer);
        return Panache
                .withTransaction(() -> Customer.<Customer> findById(id)
                        .onItem().ifNotNull().invoke(entity -> entity.city = customer.city)
                )
                .onItem().ifNotNull().transform(entity -> Response.ok(entity).build())
                .onItem().ifNull().continueWith(Response.ok().status(NOT_FOUND)::build);
    }


    //delete
    @DELETE
    @Path("/{id}")
    public Uni<Response> delete(Long id) {
        return Panache.withTransaction(() -> Customer.deleteById(id))
                .map(deleted -> deleted ? Response.ok().status(Response.Status.NO_CONTENT).build()
                        : Response.ok().status(Response.Status.NOT_FOUND).build()
                );

    }
}


How to test

POST http://localhost:8080/customers

Payload
{
    "name": "John",
    "city": "Pune"
}

GET http://localhost:8080/customers

Response:
[
    {
        "id": 1,
        "name": "John",
        "city": "Pune"
    },
    {
        "id": 2,
        "name": "John",
        "city": "Pune"
    }
]

UPDATE

PUT http://localhost:8080/customers/2

Payload
{
    "id": 2,
    "name": "Murugan",
    "city": "Banaglore"
}

DELETE http://localhost:8080/customers/1

Response:
 NoContent
....................................................................................
			Repository Pattern /DAO Pattern
....................................................................................

Mixing blocking and Non blocking dependencies of same type like hibernate and reactive hiberante libs not allowed in the same project
you will get error.

  hibernate-reactive-panache
  hibernate-panache


Traditional Pattern : Non Reactive

   <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-hibernate-orm-panache</artifactId>
    </dependency>

    <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-resteasy-reactive-jackson</artifactId>
    </dependency>
    <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-jdbc-postgresql</artifactId>
    </dependency>


1.Define Entity
=>Entity variables must be private
=>Setters and getters must be defined
package com.ibm.quarkus.data.dao.User;

package org.acme.hibernate.orm.panache.repository;

import jakarta.persistence.Cacheable;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.Id;

@Entity
public class Fruit {

    @Id
    @GeneratedValue
    public Long id;

    @Column(length = 40, unique = true)
    public String name;

    public Fruit() {
    }

    public Fruit(String name) {
        this.name = name;
    }
}

2.Write Repository
package org.acme.hibernate.orm.panache.repository;
import io.quarkus.hibernate.orm.panache.PanacheRepository;

import jakarta.enterprise.context.ApplicationScoped;

@ApplicationScoped
public class FruitRepository implements PanacheRepository<Fruit> {
}

3.Write Rest api
->You have to inject Repository class

When we write "POST,UPDATE,DELETE" , we must enable "Transaction" using

@Transactional Annotation



package org.acme.hibernate.orm.panache.repository;

import java.util.List;

import jakarta.enterprise.context.ApplicationScoped;
import jakarta.inject.Inject;
import jakarta.transaction.Transactional;
import jakarta.ws.rs.Consumes;
import jakarta.ws.rs.DELETE;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.POST;
import jakarta.ws.rs.PUT;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.Produces;
import jakarta.ws.rs.WebApplicationException;
import jakarta.ws.rs.core.Response;
import jakarta.ws.rs.ext.ExceptionMapper;
import jakarta.ws.rs.ext.Provider;

import org.jboss.logging.Logger;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;

import io.quarkus.panache.common.Sort;

@Path("repository/fruits")
@ApplicationScoped
@Produces("application/json")
@Consumes("application/json")
public class FruitRepositoryResource {

    @Inject
    FruitRepository fruitRepository;

    private static final Logger LOGGER = Logger.getLogger(FruitRepositoryResource.class.getName());

    @GET
    public List<Fruit> get() {
        return fruitRepository.listAll(Sort.by("name"));
    }

    @GET
    @Path("{id}")
    public Fruit getSingle(Long id) {
        Fruit entity = fruitRepository.findById(id);
        if (entity == null) {
            throw new WebApplicationException("Fruit with id of " + id + " does not exist.", 404);
        }
        return entity;
    }

    @POST
    @Transactional
    public Response create(Fruit fruit) {
//        if (fruit.id != null) {
//            throw new WebApplicationException("Id was invalidly set on request.", 422);
//        }
        fruitRepository.persist(fruit);
        return Response.ok(fruit).status(201).build();
    }

    @PUT
    @Path("{id}")
    @Transactional
    public Fruit update(Long id, Fruit fruit) {
        if (fruit.name == null) {
            throw new WebApplicationException("Fruit Name was not set on request.", 422);
        }

        Fruit entity = fruitRepository.findById(id);

        if (entity == null) {
            throw new WebApplicationException("Fruit with id of " + id + " does not exist.", 404);
        }
        entity.name = fruit.name;

        return entity;
    }

    @DELETE
    @Path("{id}")
    @Transactional
    public Response delete(Long id) {
        Fruit entity = fruitRepository.findById(id);
        if (entity == null) {
            throw new WebApplicationException("Fruit with id of " + id + " does not exist.", 404);
        }
        fruitRepository.delete(entity);
        return Response.status(204).build();
    }

    @Provider
    public static class ErrorMapper implements ExceptionMapper<Exception> {

        @Inject
        ObjectMapper objectMapper;

        @Override
        public Response toResponse(Exception exception) {
            LOGGER.error("Failed to handle request", exception);

            int code = 500;
            if (exception instanceof WebApplicationException) {
                code = ((WebApplicationException) exception).getResponse().getStatus();
            }

            ObjectNode exceptionJson = objectMapper.createObjectNode();
            exceptionJson.put("exceptionType", exception.getClass().getName());
            exceptionJson.put("code", code);

            if (exception.getMessage() != null) {
                exceptionJson.put("error", exception.getMessage());
            }

            return Response.status(code)
                    .entity(exceptionJson)
                    .build();
        }

    }
}
.....................................................................................
Reactive Version of DAO Pattern:
................................
   <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-reactive-pg-client</artifactId>
    </dependency>

    <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-hibernate-reactive-panache</artifactId>
    </dependency>


Steps:
1.Enity
package com.ibm.quarkus.data.dao.entity;

import java.time.LocalDate;

import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;

@Entity
public class Person {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private String name;

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }
}

2.Declare Repository class

PanacheRepository class must be from "reactive version"

io.quarkus.hibernate.reactive.panache.PanacheRepository;


package com.ibm.quarkus.data.dao.entity;

import io.quarkus.hibernate.reactive.panache.PanacheRepository;
import jakarta.enterprise.context.ApplicationScoped;
import jakarta.transaction.Transactional;


@ApplicationScoped
public class PersonRepository implements PanacheRepository<Person> {
}

3.How to Access Repository inside REST API.

3.1. we have inject Repository class.

@Path("persons")
public class PersonResource {

    @Inject
    PersonRepository personRepository;
}

3.1.CURD Operations

 =>Return type must be "Reactive Type" - Uni<?> or Multi<?>
 =>POST ,UPDATE, DELETE Operations must be handled with in "Transactions" boundaries
 =>In Active Pattern transactions are handled using apis
   Panache.withTransactions()
 =>In DAO /Repository Pattern , we have to use always "Annotations" only.
   
  =>In Non Reactive we used "@Transactional" annotation.
  =>In Reactive we have to use "@WithTransaction" annotation.
    
package com.ibm.quarkus.data.dao.entity;


package com.ibm.quarkus.data.dao.entity;


import io.quarkus.hibernate.reactive.panache.common.WithTransaction;
import io.smallrye.mutiny.Uni;
import jakarta.inject.Inject;
import jakarta.ws.rs.*;

import java.util.List;

@Path("persons")
public class PersonResource {

    @Inject
    PersonRepository personRepository;

    @GET
    public Uni<List<Person>> findAll() {
        return personRepository.listAll();
    }

    @Path("/{id}")
    @GET
    public Uni<Person> findById(@PathParam("id") Long id) {
        return personRepository.findById(id);
    }

    @POST
    @WithTransaction //reactive version of transaction annotation
    public Uni<Person> create(Person person) {
        return personRepository.persist(person);
    }

    @PUT
    @WithTransaction
    public Uni<Integer> update(Person person) {
        String query = "name ='" + person.getName() + "' where id = ?1";
        System.out.println(query);
        return personRepository.update(query, person.getId());
    }

    @Path("/{id}")
    @DELETE()
    @WithTransaction
    public Uni<Boolean> remove(Long id) {
        return personRepository.deleteById(id);
    }
}


Testing:

GET localhost:8080/persons

Response:

[
    {
        "id": 2,
        "name": "Ram"
    },
    {
        "id": 1,
        "name": "Subramanian Murugan"
    }
]

POST localhost:8080/persons

Payload
{
    "name":"Geetha"
}
PUT localhost:8080/persons

Payload
{
    "id": 1,
    "name": "Subramanian Murugan"
}

DELETE localhost:8080/persons/3























