				Quarkus and Logging
....................................................................................

Logging is one the core concept in application developement used to track the application status- what is happening.

Status of Logging:
1.info 
2.warning
3.error
4.verbose

How do you do logging?

you can do logging using System.out.println("method is called")

 This statement logs information on the console only.
 We cant save the logs inside system,for future reference,for auditing
 There is no clearity what type of message it is like error,info,waring

This is where logging frameworks comes into picture

There are most popular logging system

1.JDK java.util.logging
2.JBoss logging
3.Apache Log4J
4.Log4j or SLF4j
5.Apache Commons Logging

Quarkus uses JBoss logging by default , you dont need to add any third loggers

Basic simple example 

1.create logger using Jobss logging
@Path("/hello")
public class GreetingResource {
    //logger declartion
   private static final Logger LOG = Logger.getLogger(GreetingResource.class);

    @GET
    @Produces(MediaType.TEXT_PLAIN)
    public Uni<String> hello() {
        Log.info("Hello method is called");
        return Uni.createFrom().item("Hello from RESTEasy Reactive");
    }
}

2.Using Quarkus logging global api 
   The io.quarkus.logging.Log class mirrors the JBoss Logging API, except all apis are static methods.

import io.quarkus.logging.Log;
@Path("/hello")
public class GreetingResource {
    @GET
    @Produces(MediaType.TEXT_PLAIN)
    public Uni<String> hello() {
        Log.info("Hello method is called");
        return Uni.createFrom().item("Hello from RESTEasy Reactive");
    }
}

logger field declaration does not required

3.Inject logger as a depedency.

package org.acme;

import io.smallrye.mutiny.Uni;
import jakarta.enterprise.context.ApplicationScoped;
import jakarta.inject.Inject;
import org.jboss.logging.Logger;

@ApplicationScoped
public class HelloService {

    @Inject
    Logger logger;

    public Uni<String> sayHello(){
        logger.warn("Hello Service method");
        return Uni.createFrom().item("Hello");
    }
}

What about Apache Log4J?

if you want to use third party loggers like Log4J.

Step:
1.you need to add logger dependency.
   <dependency>
      <groupId>org.jboss.logmanager</groupId>
      <artifactId>log4j2-jboss-logmanager</artifactId>
    </dependency>

How to configure the logs during runtime using application.properties

quarkus.log.level=INFO

....................................................................................

Alternative console Logging formats:
...................................
It is possible to change the output log format.

The can be very usefull in env where the output of the quarkus application is captureed by a service which can, for eg , process and store the log information for later analytics.

JSON logging format:

   <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-logging-json</artifactId>
    </dependency>
application.properties
#enable json logging only in production not in the dev
%prod.quarkus.log.console.json=true
%dev.quarkus.log.console.json=false
....................................................................................
			Log Handlers
....................................................................................

Log handler is a logging component is responsible for the emission of log events to a Recipient.
Quarkus supports three different log handlers
 =>Console - default one
 =>File
 =>Syslog

Console Log handler:
The console log handler is default log handler by default.It outputs all log events to the console of your application(typically to the system's stdout).

File Log handler:
  The file log handler stores information in the log file

application.properties
#enable json logging only in production not in the dev
#%prod.quarkus.log.console.json=true
#%dev.quarkus.log.console.json=false
#File log handler
%dev.quarkus.log.console.enable=true
%prod.quarkus.log.file.enable=true
quarkus.log.file.level=ALL
#quarkus.log.file.path=quarkus.log

Note:
 During dev and test env we need console log
 During prod env we need file based log.

SysLog log handler:
...................
Syslog is a protocal for sending log messages on Unix like Systems using a protcal defined by REFC 5424.
..................................................................................
		 Centerlized log Management-MicroService Log Management
...................................................................................

Capturing microservice logs and send to the centeralized log managemener where we can anyalize the log info....

There are centeralized log management system like Graylog,Logstash

Logstash:
 Inside Elastic Stack or ELK - Elasticserarch,Logstash,Kibana)
 Fluentd-Elasticsearch,FlunentId,Kibana).

 How to push log information to the ELK/EFK stack	

We can use quarkus-logging-gelf execution that can use TCP or UDP to send logs in the Graylog Extended log format(GELF)

Application setup:
 GLF Stack

Graylog,Logstash,Fluentd)
...................................................................................

quarkus ext add  quarkus-logging-gelf


package org.acme;

import jakarta.ws.rs.Path;
import org.jboss.logging.Logger;

@Path("/gelf-logging")
public class GELFLogging {
    
    private static final Logger LOG =Logger.getLogger(GELFLogging.class);
    public void log(){
        LOG.info("This is ELF logs");
    }
}

application.properties
quarkus.log.handler.gelf.enabled=true
quarkus.log.hanlder.gelf.host=localhost
quarkus.log.handler.gelf.port=12201

Send logs to Graylog:
 in order to send graylog, you first need to lanuch the components that compose the GrayLog stack.

=>Mongodb
=>ElasticSearch
=>Graylog

docker-compose.yml
version: '3.2'

services:
  elasticsearch:
    image: docker.io/elastic/elasticsearch:7.16.3
    ports:
      - "9200:9200"
    environment:
      ES_JAVA_OPTS: "-Xms512m -Xmx512m"
      discovery.type: "single-node"
    networks:
      - graylog

  mongo:
    image: mongo:4.0
    networks:
      - graylog

  graylog:
    image: graylog/graylog:4.3.0
    ports:
      - "9000:9000"
      - "12201:12201/udp"
      - "1514:1514"
    environment:
      GRAYLOG_HTTP_EXTERNAL_URI: "http://127.0.0.1:9000/"
      # CHANGE ME (must be at least 16 characters)!
      GRAYLOG_PASSWORD_SECRET: "forpasswordencryption"
      # Password: admin
      GRAYLOG_ROOT_PASSWORD_SHA2: "8c6976e5b5410415bde908bd4dee15dfb167a9c873fc4bb8a81f6f2ab448a918"
    networks:
      - graylog
    depends_on:
      - elasticsearch
      - mongo

networks:
  graylog:
    driver: bridge

start docker containers

docker-compose up:

We need to create some configuration:

curl -H "Content-Type: application/json" -H "Authorization: Basic YWRtaW46YWRtaW4=" -H "X-Requested-By: curl" -X POST -v -d \
'{"title":"udp input","configuration":{"recv_buffer_size":262144,"bind_address":"0.0.0.0","port":12201,"decompress_size_limit":8388608},"type":"org.graylog2.inputs.gelf.udp.GELFUDPInput","global":true}' \
http://localhost:9000/api/system/inputs


send message and verify this url

mvnw compile quarkus:dev

http://localhost:9000/search?q=gl2_source_input%3A646211bcfa4f636bdd0ea14c&relative=0








 





