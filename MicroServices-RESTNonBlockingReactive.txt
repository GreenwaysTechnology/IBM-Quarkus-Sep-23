				Microservices
.....................................................................................
What are microservices?


Microservices - also known as the microservice architecture - is an architectural style that structures an application as a collection of services that are:

Independently deployable
Loosely coupled
Organized around business capabilities
Owned by a small team
The microservice architecture enables an organization to deliver large, complex applications rapidly, frequently, reliably and sustainably - a necessity for competing and winning in today’s world.

Let’s look at why its important to deliver software rapidly, frequently, reliably and sustainably.

Before MicroServices: 
 Monolothic ; single development,deployment.....

Microservices are collection of many design patterns.


....................................................................................
			 Micro services implementation
.....................................................................................
Microservices just archtecture, we can implement any language,any framework.

Java implementation:
1.Spring cloud
2.Quarkus
3.Vertx
etc....
.....................................................................................
.....................................................................................
			Quarkus as Microservice implmentation
.....................................................................................
Quarkus is framework which implements the most of the microservice design patterns
via Microprofile specification.

Micro Profile specification is  extension of "Microservice" design patterns.

Domain Modeling

ProductCatelog Management
Inventory Management
OrderManagement
DeliveryManagement

Application Architecture

ProductCataglog
  ->Service

What is service?

Service is nothing offering. Service means which offers something.
Service offers some biz functionality in applications
Service represents a domain like order - Order service,PaymentService

How to implement service?

=>Service is program
=>Service is single or multiple objects
=>Service Object which has apis
=>Service API's Expose some biz functionality
=>Service API may receive and return data to the callers
=>Caller could any other program which means any client apis like browsers,mobile   apps or even other microservices(Services)

Service API Design:
...................

1.WebService
   =>SOAP service =>Not in Use
   =>RestFull Webservice
       =>GraphQL API
2.RPC 
   =>TCP services
   =>Grpc Services
..................................................................................
..................................................................................
			RestFull WebService Implementation
..................................................................................
         	  Microservice-HTTP Based Microserivce
  	 	  RESTFull Web Service using Jax-rs Spec
		      using RESTEasy Framework
.....................................................................................

RESTEasy:
  RESTEasy is a JBoss / Red Hat project that provides various frameworks to help you build RESTful Web Services and RESTful Java applications. It is an implementation of the Jakarta RESTful Web Services, an Eclipse Foundation specification that provides a Java API for RESTful Web Services over the HTTP protocol.

Moreover, RESTEasy also implements the MicroProfile REST Client specification API

Quarkus team uses RESTEasy framework for building MicroService's REST API Design.

Traditional RESTEasy apps are deployed on "Jboss,Apach Tomcat" like web containers.

..................................................................................
	.....................................................................................
		 Blocking and Non blocking IO - Network Programming
...................................................................................
Web Servers:

C10k:
  How improve web server to handle more no of connections with limited resources.

Quarkus is sitting on Vertx engine, Vertx sits on Netty Engine, Netty at core uses NIO , NIO uses os "epoll or kqueue or IOCP" Of os wrappers.

Vertx Takes of care thread Managment?
  Vertx provides per cpu 2 threads

if you have 12 core cpu=> 12*2=24 Threads => Event loop threads...

.....................................................................................
			Quarkus apps enable NonBlocking arch by default....
.....................................................................................
			 Reactive Programming + Non Blockig
....................................................................................
What is Reactive Programming?

 It is programming model which has been on the top of various industry standard design patterns and pricinciples to optimize the building distributed apps(micro service)

Why Reactive Programming?

1. It must react to its users (responsive).
2. It must react to failure and stay available (resilient).
3. It must react to variable load conditions (elastic).
4. It must react to inputs (message-driven).

Reactive Programming and its design patterns  and principles?

1.NonBlocking Arch , Async
2.Observer pattern 
     -Core design pattern for building event driven arch
 Publisher publishes events  - data,error,complete
 Subscriber subscribe events - success,error,complete
3.iterator pattern
   Pull data - tradtional iterator
   Reactive Pull - Push
4.functional programming style : from imperative to declarative
   -hof - higher order function
   -pure function and immutablity = declarative, programming  - concurrency

Resources:
https://reactivex.io/intro.html
https://www.reactivemanifesto.org/
...................................................................................
		....................................................................................  
		     Standards of Reactive Programming
....................................................................................

Standards define how to build efficient distributed system using reactive principles
https://www.reactivemanifesto.org/

Reactive Streams
   It is built for java.
   Provides spec and apis how to handle back pressure in non blocking message work    flows.
   It is common/unified api for many implementators
https://www.reactive-streams.org/
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,

Reactive Programming implemenation:
...................................

Reactive programming concepts are language independent.

Java Implmentation:
...................
1.Rxjava
2.Project Reactor -  used by Spring Framework by default.
3.SmallRye Muntiny - Red hat...


Mutiny was built by Red hat team
Mutiny first integrated with Quarkus, later with Vertx.
Mutiny is reactive stream certified
Mutiny is the perfect companion to tame the async nature of apps with non blocking io.
....................................................................................

Reactive Implementation:

Steps: 

1.Create standalone Mutiny java maven project

....................................................................................
			 Core Concepts of Muntiny
....................................................................................

Publisher:
  Object - Provider of data 
  Who publish events
Subscriber:
  Object - Receiver of data
  Who listens for events
Subscription -
   Object who conects Publisher and Subscriber in back end.
Operators 
   Are apis provided to process "stream of data"


Events:
1.onItem -  onData - -> data event published by publisher when ever the data is available
2.onFailure - onError - error event published by publisher when ever the error occurred.
3.onComplete -  No more data /error published by publisher...


Muntiny Publishers Types:

1.Uni 
  Emit o or 1 item
2.Multi 
   1..to Many items - Stream

Steps:
1.create Publisher
2.emits data or error events
3.subscribe for data or error events.

Data processing 
1.create Publisher
2.emits data or error events
3.Process events(data)
4.subscribe for data or error events.



How to stream data events?

package com.ibm.reactive;

import io.smallrye.mutiny.Uni;

public class HelloMutinyUni {
    public static void main(String[] args) {
        //Create Uni Publisher
        Uni.createFrom()
                .item("Hello Mutiny") //publisher
                .subscribe()//subscriber
                .with(item->System.out.println(item));


    }
}

How to stream error events?
package com.ibm.reactive;

import io.smallrye.mutiny.Uni;

public class HelloUniError {
    public static void main(String[] args) {
        Uni.createFrom()
                .failure(new RuntimeException("Something went wrong"))
                .subscribe().with(item -> {
                    System.out.println(item);
                }, err -> {
                    System.out.println(err);
                });
    }
}

How to process data ? Uni pipelines

package com.ibm.reactive;

import io.smallrye.mutiny.Uni;

public class UniPipeLines {
    public static void main(String[] args) {
        //transformation,filtering,accumulating etc....
        Uni.createFrom()
                .item("Hello")
                .onItem().transform(item -> {
                    return item + " Subramanian";
                })
                .onItem()
                .transform(item -> item.toUpperCase())
                .subscribe()
                .with(item -> System.out.println(item));
    }
}

How to create multi items:

package com.ibm.reactive;

import io.smallrye.mutiny.Multi;

public class HelloMulti {
    public static void main(String[] args) {
        Multi.createFrom()
                .items(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
                .subscribe()
                .with(item -> System.out.println(item));

    }
}

How to process streams ? Transformations.

package com.ibm.reactive;

import io.smallrye.mutiny.Multi;

public class MultiPipeLine {
    public static void main(String[] args) {
        Multi.createFrom()
                .items(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
                .onItem().transform(item -> item * 2)
                .onItem().transform(item -> "Value is " + item)
                .subscribe()
                .with(item -> System.out.println(item));

    }
}

Filtering , selection
package com.ibm.reactive;

import io.smallrye.mutiny.Multi;

public class MultiFilteringPipeLines {
    public static void main(String[] args) {
        Multi.createFrom()
                .items(1, 2,2, 3, 4, 5, 6, 7, 8, 9, 10)
                .filter(item -> item % 2 == 0)
                .select().first(2)
                .select().distinct()
                .subscribe()
                .with(item -> System.out.println(item));

    }
}

How to handle error and how to recover from errors.

package com.ibm.reactive;

import io.smallrye.mutiny.Multi;
import io.smallrye.mutiny.Uni;

public class ErrorHandling {
    public static void main(String[] args) {
        Uni.createFrom()
                .failure(new RuntimeException("Something went wrong"))
                .onFailure().recoverWithItem("fallback")
                .subscribe().with(err-> System.out.println(err));    }
}

.................................................................................
			Quarkus Rest Api 
JAX RS- RestEasy and Reactive:

Quarkus has enbled two libs for RestEasy

Reactive Version
    <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-resteasy-reactive</artifactId>
    </dependency>

Non Reactive Version
    <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-resteasy</artifactId>
    </dependency>

Recommendation is Reactive version, so that our app is enabled with non blocking...
.....................................................................................
			 REST API development

Quarkus is based on JEE standards and MicroProfile standards

Quarkus rest api based on JAX-RS specification - Jakarta RESTful Web Services.

Quarkus implements RESTEasy Framework which is based on Jakarta WS.

RestEasy is based on Blocking and non blocking arch.

Quarkus by default adds Reactive(nonblocking) dependency.

  <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-resteasy-reactive</artifactId>
    </dependency>

RESTEasy Fundamentals:

 RESTEasy is a JBoss / Red Hat project that provides various frameworks to help you build RESTful Web Services and RESTful Java applications. It is an implementation of the Jakarta RESTful Web Services, an Eclipse Foundation specification that provides a Java API for RESTful Web Services over the HTTP protocol.
Moreover, RESTEasy also implements the MicroProfile REST Client specification API.

Resources:
  Domain model which exposes api which  are accessed by clients using urls.

CustomerResource,ProductResource,PaymentResource

RESTEasy is annotation driven.

@Path
@GET
@POST
@PUT
@DELETE

Simple Resource:
package com.ibm.rest;

import jakarta.ws.rs.*;

@Path("users")
public class UserResource {
    //apis
    @GET
    public String getUsers(){
        return "Users";
    }
    @POST
    public String create(){
        return "User Create";
    }
    @PUT
    public String update(){
        return "User update";
    }
    @DELETE
    public String remove(){
        return  "User Remove";
    }
}
.....................................................................................
			Passing data to the REST API

Data can be passed to the end point

1.through url - path parameter,query parameters,matrix parameters
   data passed
2.Through body(payload)
  
Matrix Parameters: Passing more than one parameter.
....................................................................................
				Parameters

1.Path Parameter
2.Query Parameter
3.Matrix Paraemeter
4.Form parameters

1.Path Parameters

 @Path("/{id}")
 @PathParam("id") Integer id
package com.ibm.rest;

package com.ibm.rest;

import jakarta.ws.rs.*;

@Path("users")
public class UserResource {
    //apis
    @GET
    public String getUsers(){
        return "Users";
    }

    @Path("/{id}")
    @GET
    public String findUserById(@PathParam("id") String id ) {
        return  "User By Id  " + id ;
    }

    @POST
    public String create(){
        return "User Create";
    }
    @PUT
    @Path("/{id}")
    public String update(@PathParam("id") String id){
        return "User update";
    }
    @DELETE
    @Path("/{id}")
    public String remove(@PathParam("id") String id){
        return  "User Remove " + id;
    }
}
.....................................................................................
Query Parameters:
.................

Url 
 http://www.example.com/api/customers?city=''

package com.ibm.rest;

import jakarta.ws.rs.*;

@Path("users")
public class UserResource {
    //apis
    @GET
    public String getUsers() {
        return "Users";
    }

    @Path("/{id}")
    @GET
    public String findUserById(@PathParam("id") String id) {
        return "User By Id  " + id;
    }

    //http://localhost:8080/users/contact?mailId=test@gmail.com
    @GET
    @Path("/contact")
    public String findUsersByContact(@QueryParam("mailId") String mailId) {
        return "User by mail id  " + mailId;
    }

    @POST
    public String create() {
        return "User Create";
    }

    @PUT
    @Path("/{id}")
    public String update(@PathParam("id") String id) {
        return "User update";
    }

    @DELETE
    @Path("/{id}")
    public String remove(@PathParam("id") String id) {
        return "User Remove " + id;
    }
}
.....................................................................................
			Default Values - For Query Parameters
.....................................................................................

package com.ibm.rest;

import jakarta.ws.rs.*;

@Path("users")
public class UserResource {
    //apis
    @GET
    public String getUsers() {
        return "Users";
    }

    @Path("/{id}")
    @GET
    public String findUserById(@PathParam("id")  String id) {
        return "User By Id  " + id;
    }

    //http://localhost:8080/users/contact?mailId=test@gmail.com
    @GET
    @Path("/contact")
    public String findUsersByContact(@QueryParam("mailId") @DefaultValue("contact@ibm.com") String mailId ) {
        return "User by mail id  " + mailId;
    }

    @POST
    public String create() {
        return "User Create";
    }

    @PUT
    @Path("/{id}")
    public String update(@PathParam("id") String id) {
        return "User update";
    }

    @DELETE
    @Path("/{id}")
    public String remove(@PathParam("id") String id) {
        return "User Remove " + id;
    }
}
.....................................................................................
			Matrix Parameters
.....................................................................................

URL pattern:
 /api/users/address;city=coimbatore;state=Tamil nadu;country=India

@MatrixParam("city") String city
@MatrixParam("state") String state
@MatrixParam("country") String country

http://localhost:8080/users/address;city=coimbatore;state=tamilnadu;country=india

package com.ibm.rest;

import jakarta.ws.rs.*;

@Path("users")
public class UserResource {
    //apis
    @GET
    public String getUsers() {
        return "Users";
    }

    @Path("/{id}")
    @GET
    public String findUserById(@PathParam("id")  String id) {
        return "User By Id  " + id;
    }

    //http://localhost:8080/users/contact?mailId=test@gmail.com
    @GET
    @Path("/contact")
    public String findUsersByContact(@QueryParam("mailId") @DefaultValue("contact@ibm.com") String mailId ) {
        return "User by mail id  " + mailId;
    }

    //
    @Path("/address")
    @GET
    public String getUserByAddress(@MatrixParam("city") String city,@MatrixParam("state") String state,@MatrixParam("country") String country){

         return  city + " " + state + " " + country;
    }

    @POST
    public String create() {
        return "User Create";
    }

    @PUT
    @Path("/{id}")
    public String update(@PathParam("id") String id) {
        return "User update";
    }

    @DELETE
    @Path("/{id}")
    public String remove(@PathParam("id") String id) {
        return "User Remove " + id;
    }
}
.....................................................................................
			Context Object
....................................................................................

Context Object provides information about "running container" and the application where we have deployed.

How to access context information?

@Context

Context Information:
 =>URL Information
 =>Header informations
 =>Request information
 =>ServletRequest information
 =>ServletResponse information
 =>ServletConfig,Context,SecurityContext information

package com.ibm.rest;


import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.core.Context;
import jakarta.ws.rs.core.HttpHeaders;
import jakarta.ws.rs.core.UriInfo;

@Path("context")
public class ContextResource {

    @GET
    @Path("/urls")
    public String getUrlInfo(@Context UriInfo uriInfo) {
        System.out.println(uriInfo.getAbsolutePath());
        System.out.println(uriInfo.getBaseUri());
        System.out.println(uriInfo.getPathParameters());
        System.out.println(uriInfo.getRequestUri());
        return "Url info";
    }

    @GET
    @Path("/headers")
    public String getHeadersInfo(@Context HttpHeaders httpHeaders){
        return httpHeaders.getRequestHeaders().toString();
    }

}
.....................................................................................
				Responses
.....................................................................................

What can be response?

JAX-RS api can return any one of the following type.

1.String - Plain/text
2.Objects/Collections - application/json ,application/xml.
3.void - No return type - only Status.
4.Response - Response Object
5.Reactive Type - Uni or Multi - Non blocking api is enabled.


Alread we have discussed String.

Object Type:

How to return Object?
 Object is converted into json.

package com.ibm.rest.responses;

import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;

@Path("customers")
public class CustomerResource {

    @GET
    public Customer getCustomer(){
       Customer customer = new Customer(1,"Subramanian","Murugan","Coimbatore");
       return  customer;
    }
}

After running this code, we will get response.

http://localhost:8080/customers

com.ibm.rest.responses.Customer@16a84f68

The response would be "String".

What if i want JSON?
   By default JSON Will not be returned , if you want json you need to install json parser.
.....................................................................................

Installing JSON Parser:

 Quarkus adds JSON parser via maven dependency.

.....................................................................................
			          Extensions
..................................................................................
What is extension?

 extension is , project dependency- jar dependency.

By default, you can have extensions, when we new project.

Think of Quarkus extensions are as your project dependencies.

Extensions configure,boot and integrate a framework or technology into your quarkus application.

They also do all of the heavy lifting of providing the right information to Graalvm For application to compile nativly.

How do you manage extensions?
  Management means - add,removing,list extensions

There are two extensions?

1.via maven or gradle
2.via cli -quarkus command.

List current extensions in the current project

quarkus ext ls

Looking for the newly published extensions in registry.quarkus.io
Current Quarkus extensions installed: 

? ArtifactId                                         Extension Name
? quarkus-resteasy-reactive                          RESTEasy Reactive

How to add extension?

quarkus ext add resteasy-reactive-jackson
[SUCCESS]  Extension io.quarkus:quarkus-resteasy-reactive-jackson has been installed

quarkus ext ls

Current Quarkus extensions installed: 

? ArtifactId                                         Extension Name
? quarkus-resteasy-reactive                          RESTEasy Reactive
? quarkus-resteasy-reactive-jackson                  RESTEasy Reactive Jackson


....................................................................................
			JSON and Collections
...................................................................................

package com.ibm.rest.responses;

import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;

import java.util.List;

@Path("customers")
public class CustomerResource {

    @GET
    public Customer getCustomer() {
        Customer customer = new Customer(1, "Subramanian", "Murugan", "Coimbatore");
        return customer;
    }

    //List of customers
    @GET
    @Path("list")
    public List<Customer> listCustomer() {
        return List.of(
                new Customer(1, "Subramanian", "Murugan", "Coimbatore"),
                new Customer(2, "Ram", "Murugan", "Coimbatore"),
                new Customer(3, "Geetha", "Subramanian", "Coimbatore"),
                new Customer(4, "Shrisha", "Subramanian", "Coimbatore")
        );
    }
}
....................................................................................
			Response- Limitations of Object(User,List)
....................................................................................

When We return Objects/collections ,we cant return other informations as part of Response "Custom headers tokens,urls, resource information".


Reponse Object:
 Object used to send "payload-data" along with meta data(http code, and other informations).

HTTP Status codes:

-> informational response - 100 to 199-1X
-> success response -  200-299-2X
-> Redirects  - 300-399 -3X
-> client errors - 400-499 -4X
-> server errrors - 500-599 - 5X

Response class:
 Response is abstract class contains two factory api.

public abstract Object getEntity()
public abstract int getStatus()


Builder Class:

public static ResponseBuilder status(int status)
public static ResponseBuilder ok()
public static ResponseBuilder ok(Object entity)
public static ResponseBuilder created()
public static ResponseBuilder accepted()
public static ResponseBuilder noContent()

Response class has been desinged with "Builder" /Command Chain Pattern
https://docs.jboss.org/resteasy/docs/3.0.9.Final/javadocs/index.html

package com.ibm.rest.responses;

import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.Produces;
import jakarta.ws.rs.core.MediaType;
import jakarta.ws.rs.core.Response;

import java.util.List;

@Path("products")
public class ProductResource {

    //    @GET
//    public List<Product> getProducts() {
//        return List.of(new Product(1, "Phone", 1000, 23.9F));
//    }

    @GET
    @Produces(MediaType.APPLICATION_JSON)
    public Response getProducts() {
        List<Product> products = List.of(new Product(1, "Phone", 1000, 23.9F));
        return Response
                .ok()  // 200
                .entity(products) // content
                .header("productheader", "product") //custom header
                .build();
    }
}
..................................................................................
				void
..................................................................................

Sometimes we dont expect the response from the api. just we need to return only status code.


package com.ibm.rest.responses;


import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;

@Path("update")
public class UpdateResource {

    @GET
    public void update(){
        System.out.println("update");
    }
}

http://localhost:8080/update - after running this , you will get 204-no content
....................................................................................
................................................................................................				Status Codes And RestFul Api Design
..............................................................................................
Status Code : 100 to 500

1XX Information Responses

100 Continue
101 Switching Protocols
102 Processing
103 Early Hints

2XX Success

200 OK
201 Created
202 Accepted
203 Non-Authoritative Information
204 No Content
205 Reset Content
206 Partial Content
207 Multi-Status
208 Already Reported
226 IM Used

3XX Redirection
300 Multiple Choices
301 Moved Permanently
302 Found
303 See Other
304 Not Modified
305 Use Proxy
306 Switch Proxy
307 Temporary Redirect
308 Permanent Redirect

4XX Client errors

400 Bad Request
401 Unauthorized
402 Payment Required
403 Forbidden
404 Not Found
405 Method Not Allowed
406 Not Acceptable
407 Proxy Authentication Required
408 Request Timeout
409 Conflict
410 Gone
411 Length Required
412 Precondition Failed
413 Payload Too Large
414 URI Too Long
415 Unsupported Media Type
416 Range Not Satisfiable
417 Expectation Failed
418 I'm a teapot
420 Method Failure
421 Misdirected Request
422 Unprocessable Entity
423 Locked
424 Failed Dependency
426 Upgrade Required
428 Precondition Required
429 Too Many Requests
431 Request Header Fields Too Large
451 Unavailable For Legal Reasons

5XX Server errors
500 Internal Server error
501 Not Implemented
502 Bad Gateway
503 Service Unavailable
504 gateway Timeout
505 Http version not supported
506 Varient Also negotiate
507 Insufficient Storage
508 Loop Detected
510 Not Extended
511 Network Authentication Required
....................................................................................
			Non blocking(Async)  and REST API
....................................................................................

As we discussed already, Quarkus supports non blocking io arch. 

Quarkus is running on vertx Engine.

Vertx engine uses non blocking infrastrastructure of the operating system.

Vertx Provides threading model which are two types of threads.

1.Non Blocking threads- Event Loop Threads.
2.Blocking threads or Worker Pool threads


Non Blocking threads or Event Loop Threads are used to multiplex the incoming requests.
Vertx Engine provides per cpu core two threads, if i have 12 core, then i would have 24 threads to handle incoming requests.

Worker pool threads are used to handle "Request Thread Permodel" - One request and one thread.
By default all Rest api runs on "Worker Pool thread".


Testing Threads:
................

package com.ibm.rest.responses;

import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;

@Path("threads")
public class BlockingThreadResource {
    @GET
    public String runOnWorkerPool() {
        System.out.println("Thread = > " + Thread.currentThread().getName());
        return "Worker pool";
    }
}

After Running
http://localhost:8080/threads
Worker pool

Thread = > executor-thread-1

Here exector-thread-1 is "Blocking thread" meaning that our code is running request per thread model.
....................................................................................
			How to run on non blocking thread
....................................................................................

if your endpoint method needs to accomplish an async or reactive task before being able to answer to the client, you can declare your method to return "Uni/Multi",
in which case current http request to be turned as non blocking handled by "event loop thread", the current method will not return result immediately rather which suspends current http thread.

package com.ibm.rest.responses;

import io.smallrye.mutiny.Uni;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;

import java.util.List;

@Path("threads")
public class BlockingThreadResource {

    //blocking code: running on worker pool thread
    @GET
    public String runOnWorkerPool() {
        System.out.println("Thread = > " + Thread.currentThread().getName());
        return "Worker pool";
    }

    //non blocking code: running on event loop thread

    @GET
    @Path("eventloop")
    public Uni<String> runOnEventLoop() {
        System.out.println("Thread => " + Thread.currentThread().getName());
        return Uni.createFrom().item("Hello Uni");
    }

    //reactive Products
    @GET
    @Path("reactive/products")
    public Uni<List<Product>> getProducts() {
        System.out.println("Products Thread => " + Thread.currentThread().getName());
        List<Product> products = List.of(new Product(1, "Phone", 13, 34999.90f));
        return Uni.createFrom().item(products);
    }


}
....................................................................................
			How to send Custom  Headers in the Uni

How to send "Non Reactive Response Object"?
 @GET
    @Produces(MediaType.APPLICATION_JSON)
    public Response getProducts() {
        List<Product> products = List.of(new Product(1, "Phone", 1000, 23.9F));
        return Response
                .ok()  // 200
                .entity(products) // content
                .header("productheader", "product") //custom header
                .build();
    }

How to send "Reactive Response Object"?

We have special Reactive Response class calle "RestResponse".
package com.ibm.rest.responses;

import io.smallrye.mutiny.Uni;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;
import org.jboss.resteasy.reactive.RestResponse;
import org.jboss.resteasy.reactive.RestResponse.ResponseBuilder;

import java.util.List;

@Path("threads")
public class BlockingThreadResource {

    //blocking code: running on worker pool thread
    @GET
    public String runOnWorkerPool() {
        System.out.println("Thread = > " + Thread.currentThread().getName());
        return "Worker pool";
    }

    //non blocking code: running on event loop thread

    @GET
    @Path("eventloop")
    public Uni<String> runOnEventLoop() {
        System.out.println("Thread => " + Thread.currentThread().getName());
        return Uni.createFrom().item("Hello Uni");
    }

    //reactive Products
    @GET
    @Path("reactive/products")
    public Uni<List<Product>> getProducts() {
        System.out.println("Products Thread => " + Thread.currentThread().getName());
        List<Product> products = List.of(new Product(1, "Phone", 13, 34999.90f));
        return Uni.createFrom().item(products);
    }

    //Response Reactive

    @GET
    @Path("/reactive/reactiveresponse")
    public RestResponse<List<Product>> getReactiveResponse() {
        List<Product> products = List.of(new Product(1, "Phone", 13, 34999.90f));
        return ResponseBuilder.ok(products).header("reactive", "nonblocking").build();

    }


}
.....................................................................................
			Blocking and Non Blocking Threading Models

Quarkus(Vertx) provides two types of threads

1.Event loop thread
   Thread which is used to build non blocking apps
   Vertx(Quarkus) provides limited no threads to handle large concurrency
   Quarkus enables event loop thread is activated to handle incoming request by 
   Mutiny type called "Uni or Multi"

2.Worker loop thread
    It is Request Per thread model threads, when ever new request comes, quarkus allocats new a spearate thread for that request , that thread cant be reused by other request.

....................................................................................
.................................................................................
		The Golden Rule - Don’t Block the Event Loop thread


Caution:
  You should not write any which blocks event loop thread.

if you block event loop thread, vertx engine throws warning and error(Thread Blocked Exception).

What are the code which blocks event loop thread.

1.Thread.sleep()
2.Waiting on a lock
3.Waiting on a mutex or monitor (e.g. synchronized section)
4.Doing a long lived database operation and waiting for a result
5.Doing a complex calculation that takes some significant time.
6.Spinning in a loop


package com.ibm.rest.threading;


import io.smallrye.mutiny.Uni;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;

@Path("products")
public class ProductResource {

    //This api runs by "Event loop thread"
    //This code is nonblocking code.
    @GET
    public Uni<String> getProduct() throws InterruptedException {
        //Blocking code
        Thread.sleep(10000);
        System.out.println("Thread " + Thread.currentThread().getName());
        return Uni.createFrom().item("Product");
    }
}
after running you will get error like below:
2023-01-30 14:57:09,464 WARN  [io.ver.cor.imp.BlockedThreadChecker] (vertx-blocked-thread-checker) Thread Th
read[vert.x-eventloop-thread-1,5,main] has been blocked for 2373 ms, time limit is 2000 ms: io.vertx.core.Ve
rtxException: Thread blocked
        at java.base@11.0.11/java.lang.Thread.sleep(Native Method)
        at com.ibm.rest.reactive.BookReactiveResource.blockBooks(BookReactiveResource.java:38)
        at com.ibm.rest.reactive.BookReactiveResource$quarkusrestinvoker$blockBooks_3608efa748df20ad4f3b1307
84513f30b11b4f96.invoke(Unknown Source)
 
What if i want to write blocking operations inside the nonblocking code which returns Reactive?

@Blocking Annotation:

package com.ibm.rest.threading;


import io.smallrye.common.annotation.Blocking;
import io.smallrye.mutiny.Uni;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;

@Path("products")
public class ProductResource {

    //This api runs by "Event loop thread"
    //This code is nonblocking code.
    @GET
    @Blocking //safely delegate the work to worker thread...
    public Uni<String> getProduct() throws InterruptedException {
        //Blocking code
        Thread.sleep(10000);
        System.out.println("Thread " + Thread.currentThread().getName());
        return Uni.createFrom().item("Product");
    }
}


What if i want to schdule some tasks in delayed manner?

=>Thread.sleep :Which is not reactive scheduler.
=>onItem.delayIt() : Which is reactive scheduler
package com.ibm.rest.reactive;

import com.ibm.rest.enity.Book;
import io.smallrye.common.annotation.Blocking;
import io.smallrye.mutiny.Uni;

import javax.ws.rs.Consumes;
import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;
import java.time.Duration;
import java.util.List;

@Path("/api/books")
@Produces(MediaType.APPLICATION_JSON)
@Consumes(MediaType.APPLICATION_JSON)
public class BookReactiveResource {

    @GET
    @Path("/nonreactive")
    public List<Book> listBooks() {
        System.out.println("Current Thread - listBooks " + Thread.currentThread().getName());
        return List.of(new Book("1222", "Quarkus in Action", "Subramanian"));
    }

    @GET
    @Path("/reactive")
    public Uni<List<Book>> getBooks() {
        System.out.println("Current Thread - getBooks " + Thread.currentThread().getName());
        List books = List.of(new Book("1222", "Quarkus in Action", "Subramanian"));
        return Uni.createFrom().item(books);
    }

    @GET
    @Path("/dontblockeventloop")
    @Blocking //safely delegate the work to worker thread...
    public Uni<List<Book>> blockBooks() throws InterruptedException {
        System.out.println("Current Thread - getBooks " + Thread.currentThread().getName());
        //Thread.sleep(2000);
        Thread.sleep(5000);
        List books = List.of(new Book("1222", "Quarkus in Action", "Subramanian"));
        return Uni.createFrom().item(books);
    }

    @GET
    @Path("/nonblockingdelay")
    public Uni delayBooks() throws InterruptedException {
        System.out.println("Current Thread - getBooks " + Thread.currentThread().getName());
        List books = List.of(new Book("1222", "Quarkus in Action", "Subramanian"));
        return Uni.createFrom().item(books).onItem().delayIt().by(Duration.ofSeconds(2));
    }
}
..................................................................................
			  Exception Handling
..................................................................................	What can be Response


Response Types:

1.SUCCESS Response
2.ERROR Response

How to handle / Convert ERRORS/Exceptions into HTTP Response Object?

 public Response getResponse(){

     return Response.ok().build();
 }

2.Application Exception
   
  UserNotFoundException
  PasswordMissMatchException
  ...
public boolean validate(){

  if(passwordmatch){


  }
  else{ 
       throw new PasswordMismatchException("password does not match");
  } 
}

JAX-RS also provides the javax.ws.rs.WebApplicationException. 
This can be thrown by application code and automatically processed by JAX-RS without
having to write an explicit mapper.


Steps: 
Exception Mapper 

package com.ibm.rest.exceptions;

import jakarta.ws.rs.WebApplicationException;
import jakarta.ws.rs.core.Response;
import jakarta.ws.rs.ext.ExceptionMapper;
import jakarta.ws.rs.ext.Provider;

@Provider // will inform the container to create object of this class
public class WebApplicationMapper implements ExceptionMapper<WebApplicationException> {
    @Override
    public Response toResponse(WebApplicationException exception) {
        return Response.ok().entity(exception.getMessage()).build();
    }
}

Resource:
package com.ibm.rest.exceptions;

import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.PathParam;
import jakarta.ws.rs.WebApplicationException;
import jakarta.ws.rs.core.Response;

@Path("movies")
public class MovieResource {
    @GET
    @Path("/hero/{name}")
    public Response getHero(@PathParam("name") String name) {

        if (name.equals("myhero")) {
            return Response.ok().entity("Hero " + name).build();
        } else {
            throw new WebApplicationException("Hero not found");
        }
    }
}













